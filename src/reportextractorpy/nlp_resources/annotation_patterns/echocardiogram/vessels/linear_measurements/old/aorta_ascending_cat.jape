Imports: {
	import static gate.Utils.*;
	import BHI.ReportExtractor.JapeRhsProcessor;
}



Phase: AortaAscVisualDiameter
Input: Token Anatomy VarSentence Units Categorical Numeric Lookup Split
Options: control=Appelt negationGrouping=false

Macro: CONTEXT
(
	{Anatomy,
		Anatomy within {VarSentence.minorType == "ascending_aorta"},
		Anatomy.minorType == "ascending_aorta"}
)

Macro: CONTEXT_OTHER_AORTA
(
	({Lookup.minorType == "conjunction"} | {Lookup.minorType == "preposition"} | {Token.string=="/"} | {Token.string==","})?
	{Anatomy,
		Anatomy within {VarSentence.minorType == "ascending_aorta"},
		Anatomy.majorType == "aorta"}
	({Lookup.minorType == "conjunction"} | {Lookup.minorType == "preposition"} | {Token.string=="/"} | {Token.string==","})?
)

Macro: FILTER
(
	{Token,
		!Anatomy,
		!Lookup.minorType == "conjunction",
		!Categorical,
		!Split.kind == "external",
		Token within {VarSentence.minorType == "ascending_aorta"}}
)

Macro: FILTER_ALLOW_NEG_MODIF
(
	{Token,
		!Anatomy,
		!Lookup.minorType == "conjunction",
		!Categorical.minorType != "negative_modifier",
		!Split.kind == "external",
		Token within {VarSentence.minorType == "ascending_aorta"}}
)

Macro: VALUE
(
	({Categorical, 
		Categorical.minorType == "dilated", 
		Categorical within {VarSentence.minorType == "ascending_aorta"}}) |
	({Categorical, 
		Categorical.minorType == "nondilated",
		Categorical within {VarSentence.minorType == "ascending_aorta"}})
)

Macro: MODIFIER
(
	{Categorical, 
		Categorical.minorType == "negative_modifier",
		Categorical within {VarSentence.minorType == "ascending_aorta"}}
)

/*
 * Description:
 * block general references to the proximal aorta followed by a more 
 * specific reference to part of the proximal aorta
 * e.g. 'Proximal Aorta is upper limits of normal at sinus of valsalva'
 */
Rule: ao_asc_blocker_1
Priority: 101
(	
	( CONTEXT ):context
	
	( FILTER_ALLOW_NEG_MODIF )[0,10]
			
	( (MODIFIER)? ):modifier
	
	( FILTER )[0,2]

	( VALUE ):value
	
	( FILTER )[0,5]
	
	{Lookup.minorType == "preposition"}
	
	( FILTER )[0,2]
	
	( CONTEXT_OTHER_AORTA )
			
):ao_asc_blocker
-->
:ao_asc_blocker.Blocked = {type = "ao_asc_cat_blocker"}

/*
 * Description:
 * block general references to the proximal aorta followed by a more 
 * specific reference to part of the proximal aorta
 * e.g. 'Dilated Proximal Aorta at sinus of valsalva'
 * e.g. 'Non dilated proximal aorta (3.1cm at sinus level)'
 * e.g. 'No significant evidence of dilation of the ascending aorta at sinus of valsalva'
 */
Rule: ao_asc_blocker_2
Priority: 101
(				
	( (MODIFIER)? ):modifier
	
	( FILTER )[0,3]

	( VALUE ):value
	
	( FILTER )[0,2]
	
	( CONTEXT ):context
	
	( FILTER )[0,5]
	
	{Lookup.minorType == "preposition"}
	
	( FILTER )[0,2]
	
	( CONTEXT_OTHER_AORTA )
			
):ao_asc_blocker
-->
:ao_asc_blocker.Blocked = {type = "ao_asc_cat_blocker"}

/*
 * Description:
 * block general references to the proximal aorta followed by a more 
 * specific reference to part of the proximal aorta BUT the value-context 
 * is reversed such that the normal rules do not block it.
 * e.g. 'proximal aorta non-dilated (33mm at Sov level)'
 * e.g. 'non-dilated proximal aorta (33mm Sov level)'
 */
Rule: ao_asc_blocker_3
Priority: 101
(	
	( (MODIFIER)? ):modifier
	
	( FILTER )[0,3]

	( VALUE ):value
	
	( FILTER )[0,2]
		
	( CONTEXT )
			
	{Token.kind == "punctuation", Token.position == "startpunct"}

	(
		( FILTER )[0,5]
		( {Lookup.minorType == "preposition"} )?
		( FILTER )[0,5]
		( {Anatomy, 
			Anatomy.majorType == "aorta", 
			Anatomy.minorType != "ascending_aorta"} )
	)
			
):root_blocker
-->
:root_blocker.Blocked = {type = "ao_asc_cat_blocker"}

/*
 * Description:
 * block general references to the proximal aorta followed by a more 
 * specific reference to part of the proximal aorta
 * e.g. 'Proximal Aorta: nondilated sinus of valsalva'
 */
Rule: ao_asc_blocker_4
Priority: 101
(	
	( CONTEXT ):context
	
	( {Token.string ==~ "[:-]"} | {Split.kind == "external"} )
	
	( FILTER_ALLOW_NEG_MODIF )[0,10]
			
	( (MODIFIER)? ):modifier
	
	( FILTER )[0,2]

	( VALUE ):value
	
	( CONTEXT_OTHER_AORTA )
			
):ao_asc_blocker
-->
:ao_asc_blocker.Blocked = {type = "ao_asc_cat_blocker"}

/*
 * Description:
 * Of the forms...
 * e.g. 'Asc. Ao is not dilated for height'
 * e.g. 'Sov, Stj, Asc ao are not dilated'
 * e.g. 'Asc. Ao and SOV are not dilated'
 */
Rule: ao_asc_cat_1
Priority: 100
(
	(
		(CONTEXT (CONTEXT_OTHER_AORTA)[0,2]) |
		((CONTEXT_OTHER_AORTA)[0,2] CONTEXT) |
		((CONTEXT_OTHER_AORTA)[0,1] CONTEXT (CONTEXT_OTHER_AORTA)[0,1])
	):context
	
	( FILTER_ALLOW_NEG_MODIF )[0,20]
			
	( (MODIFIER)? ):modifier
	
	( FILTER )[0,2]

	( VALUE ):value
	
):ao_asc_cat 
--> 
:ao_asc_cat
{
	/* Creation of the processor object does an 'in-place' processing of the annotations found using the above rules.
	 * Using the bindings, strings are extracted from the doc, processed/parsed, then inserted into the outputAS (output
	 * annotation set).	
	 */
	JapeRhsProcessor processor = new JapeRhsProcessor("echocardiogram", "ao_asc_cat", doc, bindings, outputAS);
}

/*
 * Description:
 * Of the forms...
 * e.g. 'Non-dilated Asc Ao'
 * e.g. 'No evidence of significant dilation of the Asc Ao'
 * e.g. 'Not dilated at the Asc Ao'
 * e.g. 'Non-dilated aortic root at the Asc Ao'
 * e.g. 'Non-dilated aortic root at the Sov and Asc Ao'
 * e.g. 'Non dilated aortic root (3.1cm at the level of the ascending aorta)'
 */
Rule: ao_asc_cat_2
Priority: 99
(
	( (MODIFIER)? ):modifier
	
	( FILTER )[0,3]

	( VALUE ):value
	
	(
		{Anatomy,
			Anatomy.minorType == "aortic_root",
			Anatomy within {VarSentence.minorType == "ascending_aorta"}}
		
		( FILTER )[0,5]
				
		{Lookup.minorType == "preposition"}
	)?
			
	( FILTER )[0,4]
	
	(
		(CONTEXT (CONTEXT_OTHER_AORTA)[0,2]) |
		((CONTEXT_OTHER_AORTA)[0,2] CONTEXT) |
		((CONTEXT_OTHER_AORTA)[0,1] CONTEXT (CONTEXT_OTHER_AORTA)[0,1])
	):context
	
):ao_asc_cat 
--> 
:ao_asc_cat
{
	/* Creation of the processor object does an 'in-place' processing of the annotations found using the above rules.
	 * Using the bindings, strings are extracted from the doc, processed/parsed, then inserted into the outputAS (output
	 * annotation set).	
	 */
	JapeRhsProcessor processor = new JapeRhsProcessor("echocardiogram", "ao_asc_cat", doc, bindings, outputAS);
}
