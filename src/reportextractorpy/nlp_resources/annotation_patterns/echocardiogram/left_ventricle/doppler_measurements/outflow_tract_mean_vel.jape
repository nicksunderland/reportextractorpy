//TODO: the remaining rules at the bottom 


Imports: {
	import static gate.Utils.*;
	import BHI.ReportExtractor.JapeRhsProcessor;
}

Phase: outflow_tract_mean_velocity
Input: Token Lookup
Options: control=Appelt 



Rule: lvot_mean_vel_rule_1
Priority:10
(

	(
		({Token.string ==~ "(?i)LVOT"})
		({Token.string ==~ "(?i)VMEAN"})?
		({Token.string ==~ "(?i)V"} {Token.string ==~ "(?i)MEAN"} | {Token.string ==~ "(?i)mean"} {Token.string =~ "(?i)vel"})?
		({Token.string == "="} | {Token.string == "["} | {Token.string == ":"} | {Token.string == "-"} | {Token.string ==~ "(?i)OF"} | {Token.string ==~ "(?i)IS"} | {Token.string == "AT"})?
	):context

	(
		({Token.kind == "number"})?
		({Token.string == "."})?
		{Token.kind == "number"}
	):value

	(
		({Token.string ==~ "(?i)M"} | {Token.string ==~ "(?i)CM"})
	):unit //capture unit
		({Token.string == "/"} | {Token.string == "."})
		{Token.string ==~ "(?i)S"} //end complete unit
	
):lvot_mean_vel
--> 
:lvot_mean_vel
  {
	/* Creation of the processor object does an 'in-place' processing of the annotations found using the above rules.
	 * Using the bindings, strings are extracted from the doc, processed/parsed, then inserted into the outputAS (output
	 * annotation set).	
	 */
	JapeRhsProcessor processor = new JapeRhsProcessor("echocardiogram", "lvot_mean_vel",
													  doc, 
													  bindings, 
													  outputAS);
  }



//
//Rule: LVOTVmaxAlternValueRule
//Priority:1
//(
//(
//({Token.string ==~ "(?i)LVOT"})
//({Token.string !=~ "(?i)AORTA", Token.string !=~ "(?i)VENTRICLE", Token.string !=~ "(?i)MEASUREMENTS", Token.string !=~ "(?i)AR", Token.string !=~ "(?i)A[OV]", Token.string !=~ "(?i)AVA[I]?"}|{SpaceToken.string!=VMAX})*
//):context
//)
//
//(
//(
//(
//{Token.string ==~ "(?i)PEAK"} {Token.string ==~ "(?i)DOPPLER"} {Token.string ==~ "(?i)VELOCITY[-]?"} ({Token.string == "-"})?
//| {Token.string ==~ "(?i)V"} {Token.string ==~ "(?i)MAX"} | {Token.string ==~ "(?i)VM[A]?X"}  |
//{Token.string ==~ "(?i)PEAK"} {Token.string ==~ "(?i)V"}  
//) 
//
//({Token.string == "="} | {Token.string == "["} | {Token.string == ":"} | {Token.string == "-"} | {Token.string ==~ "(?i)OF"} | {Token.string ==~ "(?i)IS"} | {Token.string == "AT"})?
//):context
//
//(({Token.kind == "number"})?
//({Token.string == "."})?
//{Token.kind == "number"}):varValue
//
//(
//(({Token.string ==~ "(?i)M"} | {Token.string ==~ "(?i)CM"}):unit)
//({Token.string == "/"} | {Token.string == "."})
//{Token.string ==~ "(?i)S"}
//)
//
//):LVOTVmaxAlternValueGram 
//
//--> 
//:LVOTVmaxAlternValueGram
//  {
//	gate.AnnotationSet matchedVar=(gate.AnnotationSet) bindings.get("varValue");
//	
//	gate.AnnotationSet matchedcontext=(gate.AnnotationSet) bindings.get("context");
//	
//	gate.AnnotationSet matchedunit=(gate.AnnotationSet) bindings.get("unit");
//	
//    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("LVOTVmaxAlternValueGram");	
//	gate.FeatureMap newFeatures= Factory.newFeatureMap();
//	
//	String unitOrig = "";
//	
//	if (matchedunit != null) {
//		unitOrig = stringFor(doc, matchedunit);
//		newFeatures.put("unit", unitOrig);
//	}
//	
//	String varStr = stringFor(doc, matchedVar);
//	
//	double varDouble = Double.parseDouble(varStr);
//	
//	if (unitOrig.equals("cm")) {
//	
//		varDouble = varDouble / 100D;
//		
//		newFeatures.put("varOrig", varStr);
//		newFeatures.put("varValue", String.valueOf(varDouble));
//		
//		newFeatures.put("unit", "m");
//		
//	} else {
//		newFeatures.put("varValue", varStr);
//	}
//	
//	newFeatures.put("varType","LVOT Vmax");
//	newFeatures.put("context", stringFor(doc, matchedcontext));
//	newFeatures.put("rule", "LVOT Vmax altern");
//	
//	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"CardiacChambers", newFeatures);
//  }
//  
//
//Rule: LVOTVmaxAltern2ValueRule
//(
//(
//({Token.string ==~ "(?i)LVOT"})
//
//( {Token.string == ","} )?
//({Token.kind == "word"})?
//({Token.kind == "word"})?
//({Token.kind == "word"})?
//({Token.kind == "word"})?
//
//({Token.string == "="} | {Token.string == "["} | {Token.string == ":"} | {Token.string == "-"} | {Token.string ==~ "(?i)OF"} | {Token.string ==~ "(?i)IS"} | {Token.string == "AT"})?
//):context
//
//(({Token.kind == "number"})?
//({Token.string == "."})?
//{Token.kind == "number"}):varValue
//
//(
//(({Token.string ==~ "(?i)M"} | {Token.string ==~ "(?i)CM"}):unit)
//({Token.string == "/"} | {Token.string == "."})
//{Token.string ==~ "(?i)S"}
//)
//
//):LVOTVmaxAltern2ValueGram 
//
//--> 
//:LVOTVmaxAltern2ValueGram
//  {
//	gate.AnnotationSet matchedVar=(gate.AnnotationSet) bindings.get("varValue");
//	
//	gate.AnnotationSet matchedcontext=(gate.AnnotationSet) bindings.get("context");
//	
//	gate.AnnotationSet matchedunit=(gate.AnnotationSet) bindings.get("unit");
//	
//    gate.AnnotationSet matchedAnns= (gate.AnnotationSet) bindings.get("LVOTVmaxAltern2ValueGram");	
//	gate.FeatureMap newFeatures= Factory.newFeatureMap();
//	
//	String unitOrig = "";
//	
//	if (matchedunit != null) {
//		unitOrig = stringFor(doc, matchedunit);
//		newFeatures.put("unit", unitOrig);
//	}
//	
//	String varStr = stringFor(doc, matchedVar);
//	
//	double varDouble = Double.parseDouble(varStr);
//	
//	if (unitOrig.equals("cm")) {
//	
//		varDouble = varDouble / 100D;
//		
//		newFeatures.put("varOrig", varStr);
//		newFeatures.put("varValue", String.valueOf(varDouble));
//		
//		newFeatures.put("unit", "m");
//		
//	} else {
//		newFeatures.put("varValue", varStr);
//	}
//	
//	newFeatures.put("varType","LVOT Vmax");
//	newFeatures.put("context", stringFor(doc, matchedcontext));
//	newFeatures.put("rule", "LVOT Vmax altern2");
//	
//	outputAS.add(matchedAnns.firstNode(),matchedAnns.lastNode(),"CardiacChambers", newFeatures);
//  }

  