Imports: {
	import static gate.Utils.*;
	import BHI.ReportExtractor.JapeRhsProcessor;
}


Phase: CleanSplitNumeric
Input: Numeric Units Token Split
Options: control=Appelt negationGrouping=false
/*
 * Description:
 * Here we retag split numeric values e.g. 1m 80cm ({Numeric}{Units}{Numeric}{Units}) becomes 1.8m {Numeric}{Units}
 * To keep it compatible with the Context:Numeric:Units matching we assign the 'value' feature of the metre annotation
 * to a combination of the metre and cm; then remove annots from the '80' and the 'cm' so they effectively get ignored.
 * is correct. 
 */
Rule: split_metric_length
(
	({Numeric}):metres		 
	({Units.minorType == "m"})
	({Numeric}):cm
	({Units.minorType == "cm"})?

):split_metric
-->
:split_metric{
	
	String metres_str = stringFor(doc, bindings.get("metres"));
	String cm_str     = bindings.get("cm")!=null ? stringFor(doc, bindings.get("cm")) : "0";
	String value = null;
	try {
		Double metres = Double.parseDouble(metres_str);
		Double cm     = Double.parseDouble(cm_str);
		metres = metres + (cm / 100.0);
		value = metres.toString();
	}catch(Exception e) {
		return;
	}
	FeatureMap newFeatures = Factory.newFeatureMap();
	newFeatures.put("value", value);
	newFeatures.put("type", "split_value");
	outputAS.add(bindings.get("metres").firstNode(),bindings.get("metres").lastNode(),"Numeric", newFeatures);

	
	// Since now the data lives in the new Numeric annotation's feature, we can clean up and remove the Numeric / Units annots	
	AnnotationSet splitMetricAnnot = bindings.get("split_metric");
	
	FeatureMap fm_double = Factory.newFeatureMap();
	fm_double.put("type", "double");
	AnnotationSet doubleWithin = inputAS.get("Numeric", fm_double).getContained(
			splitMetricAnnot.firstNode().getOffset(),
			splitMetricAnnot.lastNode().getOffset());
	inputAS.removeAll(doubleWithin);
	
	FeatureMap fm_integer = Factory.newFeatureMap();
	fm_integer.put("type", "integer");
	AnnotationSet integerWithin = inputAS.get("Numeric", fm_integer).getContained(
			splitMetricAnnot.firstNode().getOffset(),
			splitMetricAnnot.lastNode().getOffset());
	inputAS.removeAll(integerWithin);
	
	FeatureMap fm_cm = Factory.newFeatureMap();
	fm_cm.put("minorType", "cm");
	AnnotationSet cmUnitsWithin = inputAS.get("Units", fm_cm).getContained(
			splitMetricAnnot.firstNode().getOffset(),
			splitMetricAnnot.lastNode().getOffset());
	inputAS.removeAll(cmUnitsWithin);
}


Phase: ImageFrameNumericReferences
Input: Numeric Token Lookup
Options: control=Brill negationGrouping=false
/*
 * Description:
 * Tag references to specific images or frames and remove the numeric tag e.g. frame 4 & 5 & 6, or images 4, 6
 */
Rule: image_frame_tagger
(	
	{Lookup.majorType == "image_frame"}
	
	({Token.kind == "number", 
		Token notWithin Lookup, 
		Token notWithin Units}
	 ({Token.kind == "punctuation"}|{Lookup.minorType == "conjunction"}))[0,3]
				
	({Token.kind == "number", 
		Token notWithin Lookup, 
		Token notWithin Units}):image_num

):image_frame
-->
:image_frame{
	
	FeatureMap newFeatures = Factory.newFeatureMap();
	newFeatures.put("value", stringFor(doc, bindings.get("image_num")));
	newFeatures.put("majorType", "image_frame_value");
	newFeatures.put("minorType", "image_frame_value");
	outputAS.add(bindings.get("image_frame").firstNode(),bindings.get("image_frame").lastNode(),"Lookup", newFeatures);

	// Since now the data lives in the new Numeric annotation's feature, we can clean up and remove the Numeric / Lookup annots
	AnnotationSet imageFrameAnnot = bindings.get("image_frame");
	
	AnnotationSet numericWithin = inputAS.get("Numeric").getContained(
			imageFrameAnnot.firstNode().getOffset(),
			imageFrameAnnot.lastNode().getOffset());
	inputAS.removeAll(numericWithin);
	
	FeatureMap fm = Factory.newFeatureMap();
	fm.put("majorType", "image_frame");
	AnnotationSet lookupWithin = inputAS.get("Lookup", fm).getContained(
			imageFrameAnnot.firstNode().getOffset(),
			imageFrameAnnot.lastNode().getOffset());
	inputAS.removeAll(lookupWithin);
}


Phase: RelationalDistance
Input: Numeric Token Lookup Anatomy Units Split
Options: control=Brill negationGrouping=false
/*
 * Description:
 * Tag references to distances in relation to something else, these rarely are the numeric value we want 
 * e.g. the Asc Ao measured 1cm from the StJ is 33mm (we want to tag the 1cm as a relational distance and 
 * the 33mm as a normal integer Numeric annotation which can be found later
 */
Rule: relational_distance_rule
(	
	({Anatomy}):anatomy1
	({Token, !Split})[0,1]
	{Lookup.majorType == "measure_verb"}
	({Numeric}):distance
	(({Units.majorType == "length"})?):units
	{Lookup.minorType == "preposition", //e.g. from
		!Token.string ==~ "(at)|(on)"}
	({Anatomy}):anatomy2

):relational_distance
-->
:relational_distance.Lookup = {	 anatomy1  = :anatomy1.Anatomy.minorType,
				 			     anatomy2  = :anatomy2.Anatomy.minorType,
				 			     distance  = :distance.Numeric.value,
				 				 units     = :units.Units.minorType,
				 				 majorType = "relational_distance"},
:relational_distance{
	inputAS.remove( bindings.get("distance").iterator().next() );
	inputAS.remove( bindings.get("anatomy2").iterator().next() );
	if(bindings.get("units")!=null) {
		inputAS.remove(bindings.get("units").iterator().next());
	}
}